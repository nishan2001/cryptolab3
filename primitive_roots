def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

def phi(n):
    result = 1
    for i in range(2, n):
        if gcd(i, n) == 1:
            result += 1
    return result

def is_primitive_root(g, p):
    phi_value = phi(p)
    values = set(pow(g, powers, p) for powers in range(1, phi_value))
    return len(values) == phi_value - 1

def primitive_roots(p):
    if not is_prime(p):
        return []
    roots = []
    for g in range(2, p):
        if is_primitive_root(g, p):
            roots.append(g)
    return roots

# Test the function
p = int(input("Enter a prime number: "))
roots = primitive_roots(p)
if roots:
    print(f"The primitive roots of {p} are: {roots}")
else:
    print(f"No primitive roots found for {p}.")
    